#version 430
layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;
layout (r32f, binding = 0) uniform image3D volume;
// layout (std430, binding = 2) buffer worleyNoisePointBuffer
// {
//     vec4 worleyPoints[];
// };

uniform ivec3 volumeDims;
uniform float freq;
uniform bool invert;

// Hash by David_Hoskins
#define UI0 1597334673U
#define UI1 3812015801U
#define UI2 uvec2(UI0, UI1)
#define UI3 uvec3(UI0, UI1, 2798796415U)
#define UIF (1.0 / float(0xffffffffU))

vec3 hash33(vec3 p)
{
	uvec3 q = uvec3(ivec3(p)) * UI3;
	q = (q.x ^ q.y ^ q.z)*UI3;
	return -1.0 + 2.0 * vec3(q) * UIF;
}

float remap(float x, float a, float b, float c, float d)
{
    return (((x - a) / (b - a)) * (d - c)) + c;
}

// Gradient noise by iq (modified to be tileable)
float gradientNoise(vec3 x, float freq)
{
    // grid
    vec3 p = floor(x);
    vec3 w = fract(x);
    
    // quintic interpolant
    vec3 u = w * w * w * (w * (w * 6.0 - 15.0) + 10.0);

    
    // gradients
    vec3 ga = hash33(mod(p + vec3(0.0, 0.0, 0.0), freq));
    vec3 gb = hash33(mod(p + vec3(1.0, 0.0, 0.0), freq));
    vec3 gc = hash33(mod(p + vec3(0.0, 1.0, 0.0), freq));
    vec3 gd = hash33(mod(p + vec3(1.0, 1.0, 0.0), freq));
    vec3 ge = hash33(mod(p + vec3(0.0, 0.0, 1.0), freq));
    vec3 gf = hash33(mod(p + vec3(1.0, 0.0, 1.0), freq));
    vec3 gg = hash33(mod(p + vec3(0.0, 1.0, 1.0), freq));
    vec3 gh = hash33(mod(p + vec3(1.0, 1.0, 1.0), freq));
    
    // projections
    float va = dot(ga, w - vec3(0.0, 0.0, 0.0));
    float vb = dot(gb, w - vec3(1.0, 0.0, 0.0));
    float vc = dot(gc, w - vec3(0.0, 1.0, 0.0));
    float vd = dot(gd, w - vec3(1.0, 1.0, 0.0));
    float ve = dot(ge, w - vec3(0.0, 0.0, 1.0));
    float vf = dot(gf, w - vec3(1.0, 0.0, 1.0));
    float vg = dot(gg, w - vec3(0.0, 1.0, 1.0));
    float vh = dot(gh, w - vec3(1.0, 1.0, 1.0));
	
    // interpolation
    return va + 
           u.x * (vb - va) + 
           u.y * (vc - va) + 
           u.z * (ve - va) + 
           u.x * u.y * (va - vb - vc + vd) + 
           u.y * u.z * (va - vc - ve + vg) + 
           u.z * u.x * (va - vb - ve + vf) + 
           u.x * u.y * u.z * (-va + vb + vc - vd + ve - vf - vg + vh);
}

// Tileable 3D worley noise
float worleyNoise(vec3 uv, float freq)
{    
    vec3 id = floor(uv);
    vec3 p = fract(uv);
    
    float minDist = 10000.;
    for (float x = -1.0; x <= 1.0; ++x)
    {
        for(float y = -1.0; y <= 1.0; ++y)
        {
            for(float z = -1.0; z <= 1.0; ++z)
            {
                vec3 offset = vec3(x, y, z);
            	vec3 h = hash33(mod(id + offset, vec3(freq))) * 0.4 + 0.3; // [.3, .7]
    			h += offset;
            	vec3 d = p - h;
           		minDist = min(minDist, dot(d, d));
            }
        }
    }
    
    // inverted worley noise
	if (invert) {
		return 1. - minDist;
	}
	else {
		return minDist;
	}
}

// Fbm for Perlin noise based on iq's blog
float perlinfbm(vec3 p, float freq, int octaves)
{
    float G = exp2(-0.85);
    float amp = 1.0;
    float noise = 0.0;
    for (int i = 0; i < octaves; ++i)
    {
        noise += amp * gradientNoise(p * freq, freq);
        freq *= 2.0;
        amp *= G;
    }
    
    return noise;
}

// Tileable Worley fbm inspired by Andrew Schneider's Real-Time Volumetric Cloudscapes
// chapter in GPU Pro 7.
float worleyFbm(vec3 p, float freq)
{
    return worleyNoise(p*freq, freq) * 0.625 +
        	 worleyNoise(p*freq*2.0, freq*2.0) * 0.25 +
        	 worleyNoise(p*freq*4.0, freq*4.0) * 0.125;
}

// int ivecMin3 (ivec3 v) {
//   return min (min (v.x, v.y), v.z);
// }

// int ivecMax3 (ivec3 v) {
//   return max (max (v.x, v.y), v.z);
// }

// ivec3[27] cellAdjacentOffsets = {
// 	ivec3(-1, 1, 1), ivec3(0, 1, 1), ivec3(1, 1, 1), // Top Back
// 	ivec3(-1, 1, 0), ivec3(0, 1, 0), ivec3(1, 1, 0), // Top center
// 	ivec3(-1, 1, -1), ivec3(0, 1, -1), ivec3(1, 1, -1), // Top front

// 	ivec3(-1, 0, 1), ivec3(0, 0, 1), ivec3(1, 0, 1), // Center Back
// 	ivec3(-1, 0, 0), ivec3(0, 0, 0), ivec3(1, 0, 0), // Center center
// 	ivec3(-1, 0, -1), ivec3(0, 0, -1), ivec3(1, 0, -1), // Center front

// 	ivec3(-1, -1, 1), ivec3(0, -1, 1), ivec3(1, -1, 1), // Bottom Back
// 	ivec3(-1, -1, 0), ivec3(0, -1, 0), ivec3(1, -1, 0), // Bottom center
// 	ivec3(-1, -1, -1), ivec3(0, -1, -1), ivec3(1, -1, -1) // Bottom front
// };

// float worley(int numCells, vec3 samplePos)
// {
// 	ivec3 cellID = ivec3(floor(samplePos * numCells));
// 	float minSqrDst = 1.0;

// 	// loop over current and all adjacent cells to find closest point to samplePos
// 	for (int cellAdjacentIndex = 0; cellAdjacentIndex < 27; cellAdjacentIndex++)
// 	{
// 		ivec3 adjCellID = cellID + cellAdjacentOffsets[cellAdjacentIndex];
// 		// Check if cell is outside of volume, if so, wrap around to other side for seamless tiling
// 		if (ivecMin3(adjCellID) == -1 || ivecMax3(adjCellID) == numCells) 
// 		{
// 			ivec3 wrappedCellID = (adjCellID + numCells) % ivec3(numCells);
// 			int adjCellIndex = wrappedCellID.x + numCells * (wrappedCellID.y + wrappedCellID.z * numCells);
// 			vec3 wrappedPoint = worleyPoints[adjCellIndex].xyz;
	
// 			for (int wrapOffsetIndex = 0; wrapOffsetIndex < 27; wrapOffsetIndex++) {
// 				vec3 sampleOffset = samplePos - (wrappedPoint + cellAdjacentOffsets[wrapOffsetIndex]);
// 				minSqrDst = min(minSqrDst, dot(sampleOffset, sampleOffset));
// 			}
// 		}
// 		// The Adjacent cell is inside the cloud volume, calculate sqrDst from samplePos to cell point
// 		else 
// 		{
// 			int adjCellIndex = adjCellID.x + numCells * (adjCellID.y + adjCellID.z * numCells);
// 			vec3 sampleOffset = samplePos - worleyPoints[adjCellIndex].xyz;
// 			minSqrDst = min(minSqrDst, dot(sampleOffset, sampleOffset));
// 		}
// 	}
	
// 	return sqrt(minSqrDst);
// }

void main()
{
	ivec3 voxelCoord = ivec3(gl_GlobalInvocationID.xyz);
	vec3 uvw = vec3(voxelCoord) / vec3(volumeDims);

	// float density = worley(numCellsPerAxis, uvw);
	// if (invert)
	// {
	// 	density = 1.0 - density;
	// }

	float pfbm= mix(1.0, perlinfbm(uvw, 4.0, 7), 0.5);
    pfbm = abs(pfbm * 2.0 - 1.0); // billowy perlin noise

	vec4 cloudNoises = vec4(0.0);
	cloudNoises.g += worleyFbm(uvw, freq);
	cloudNoises.b += worleyFbm(uvw, freq*2.0);
	cloudNoises.a += worleyFbm(uvw, freq*4.0);
	cloudNoises.r += remap(pfbm, 0.0, 1.0, cloudNoises.g, 1.0); // perlin-worley

	imageStore(volume, voxelCoord, cloudNoises);
}