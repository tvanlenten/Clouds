#version 430
layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
layout (rgba8, binding = 0) uniform imageCube cubemap;

uniform ivec2 texDims;
uniform vec3 sunPos;

void GetRay(vec2 uv, int cubeFace, inout vec3 ro, inout vec3 rd)
{
	vec2 cam = uv * 2.0 - 1.0;
	ro = vec3(0.0);
	switch(cubeFace)
	{
	case 0:
		rd = vec3(1.0, -cam.y, -cam.x);
		break;
	case 1:
		rd = vec3(-1.0, -cam.y, cam.x);
		break;
	case 2:
		rd = vec3(cam.x, 1.0, cam.y);
		break;
	case 3:
		rd = vec3(cam.x, -1.0, -cam.y);
		break;
	case 4:
		rd = vec3(cam.x, -cam.y, 1.0);
		break;
	case 5:
		rd = vec3(-cam.x, -cam.y, -1.0);
		break;
	}
}

float iSphere(vec3 ro, vec3 rd, vec4 sph)
{
    vec3  d = ro - sph.xyz;
    float b = dot(rd,d);
    float w = sph.w*sph.w;
    float c = dot(d,d) - w;
    float t = b*b-c;
    
    if(t > 0.0) {
        return (dot(d,d) < w)? -b+sqrt(t) : -b-sqrt(t);
    }
    return -1.0;
}

void main()
{
	ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
	int cubeFace = int(gl_GlobalInvocationID.z);
	vec2 uv = vec2(pixelCoord) / vec2(texDims);

	vec3 ro, rd;
	GetRay(uv, cubeFace, ro, rd);
	vec3 nrd = normalize(rd);

	vec3 col = mix(
		mix(vec3(0.062, 0.137, 0.062), vec3(0.192, 0.517, 0.121), smoothstep(0.0, 0.05, -nrd.y)),
		mix(vec3(0.168, 0.035, 0.525), vec3(0.450, 0.721, 0.905), smoothstep(0.0, 1.0, nrd.y)),
		step(0.0, nrd.y)
	);

	float sunT = iSphere(ro, nrd, vec4(sunPos, 0.4));
	if(nrd.y > 0.0 && sunT > 0.0)
	{
		col = mix(col, vec3(0.956, 0.909, 0.580), 1.0/(sunT*sunT));
	}

	vec4 color = vec4(col, 1.0);

	imageStore(cubemap, ivec3(pixelCoord, cubeFace), color);
}